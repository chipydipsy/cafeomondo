! function(e) {
    function t(e, t) {
        var f = e.find(".premium-fancy-text-wrapper"),
            o = f.data("settings"),
            n = o.delay || 2500,
            a = f.find(".premium-fancy-list-items").length,
            i = "" !== o.count || ["typing", "slide", "autofade"].includes(o.effect) ? o.count * a : "infinite";
        if ("typing" === o.effect) {
            var s = [];
            o.strings.forEach(function(e) {
                s.push(e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;"))
            });
            var r = "#" + f.find(".premium-fancy-text").attr("id"),
                c = new Typed(r, {
                    strings: s,
                    typeSpeed: o.typeSpeed,
                    backSpeed: o.backSpeed,
                    startDelay: o.startDelay,
                    backDelay: o.backDelay,
                    showCursor: o.showCursor,
                    cursorChar: o.cursorChar,
                    loop: o.loop
                });
            e.hasClass("fancy-text-stop") && c.stop(), t(".fancy-text-stop").bind("fancy-text-start", function() {
                c.start()
            })
        } else if ("slide" === o.effect) n = o.pause, f.find(".premium-fancy-text").vTicker({
            speed: o.speed,
            showItems: o.showItems,
            pause: o.pause,
            mousePause: o.mousePause,
            direction: "up"
        });
        else if ("auto-fade" === o.effect) {
            var m = f.find(".premium-fancy-list-items"),
                u = m.length;
            if (0 === u) return;
            var d = o.duration / u,
                p = 0;
            n = d, m.each(function(e, t) {
                t.style.animationDelay = p + "ms", p += d
            })
        } else {
            ! function() {
                var t = f.find(".premium-fancy-list-items"),
                    n = 1,
                    e = o.delay || 2500,
                    a = o.count;
                if (a) var i = 1,
                    s = f.find(".premium-fancy-list-items").length;
                var r = setInterval(function() {
                    var e = "";
                    "custom" === o.effect && (e = "animated " + o.animation), t.eq(n).addClass("premium-fancy-item-visible " + e).removeClass("premium-fancy-item-hidden"), t.filter(function(e) {
                        return e !== n
                    }).addClass("premium-fancy-item-hidden").removeClass("premium-fancy-item-visible " + e), n++, t.length === n && (n = 0), a && s * a === ++i && clearInterval(r)
                }, e)
            }()
        }
        "typing" !== o.effect && setTimeout(function() {
            f.find(".premium-fancy-text").css("opacity", "1")
        }, 500), "loading" === o.loading && "typing" !== o.effect && (e.find(".premium-fancy-text").append('<span class="premium-loading-bar"></span>'), e.find(".premium-loading-bar").css({
            "animation-iteration-count": i,
            "animation-duration": n + "ms"
        }))
    }
    e(window).on("elementor/frontend/init", function() {
        elementorFrontend.hooks.addAction("frontend/element_ready/premium-addon-fancy-text.default", t)
    })
}(jQuery);
! function(a) {
    a(window).on("elementor/frontend/init", function() {
        var e = elementorModules.frontend.handlers.Base.extend({
            settings: {},
            getDefaultSettings: function() {
                return {
                    selectors: {
                        galleryElement: ".premium-gallery-container",
                        filters: ".premium-gallery-cats-container li",
                        gradientLayer: ".premium-gallery-gradient-layer",
                        loadMore: ".premium-gallery-load-more",
                        loadMoreDiv: ".premium-gallery-load-more div",
                        vidWrap: ".premium-gallery-video-wrap"
                    }
                }
            },
            getDefaultElements: function() {
                var e = this.getSettings("selectors"),
                    t = {
                        $galleryElement: this.$element.find(e.galleryElement),
                        $filters: this.$element.find(e.filters),
                        $gradientLayer: this.$element.find(e.gradientLayer),
                        $vidWrap: this.$element.find(e.vidWrap)
                    };
                return t.$loadMore = t.$galleryElement.parent().find(e.loadMore), t.$loadMoreDiv = t.$galleryElement.parent().find(e.loadMoreDiv), t
            },
            bindEvents: function() {
                this.getGlobalSettings(), this.run();
                var e = this;
                a(document).on("elementor/popup/show", function() {
                    e.run()
                })
            },
            getGlobalSettings: function() {
                var e = this.elements.$galleryElement.data("settings");
                this.settings = {
                    layout: e.img_size,
                    loadMore: e.load_more,
                    columnWidth: null,
                    filter: null,
                    isFilterClicked: !1,
                    minimum: e.minimum,
                    imageToShow: e.click_images,
                    counter: e.minimum,
                    ltrMode: e.ltr_mode,
                    shuffle: e.shuffle,
                    active_cat: e.active_cat,
                    theme: e.theme,
                    overlay: e.overlay,
                    sort_by: e.sort_by,
                    light_box: e.light_box,
                    flag: e.flag,
                    lightbox_type: e.lightbox_type
                }
            },
            updateCounter: function() {
                this.settings.isFilterClicked ? (this.settings.counter = this.settings.minimum, this.settings.isFilterClicked = !1) : this.settings.counter = this.settings.counter, this.settings.counter = this.settings.counter + this.settings.imageToShow
            },
            updateGrid: function(e, t, i) {
                a.ajax({
                    url: this.appendItems(this.settings.counter, e, t),
                    beforeSend: function() {
                        i.removeClass("premium-gallery-item-hidden")
                    },
                    success: function() {
                        i.addClass("premium-gallery-item-hidden")
                    }
                })
            },
            loadMore: function(e, t) {
                var i = this.elements.$galleryElement,
                    l = this.elements.$loadMoreDiv,
                    n = this.elements.$loadMore,
                    s = this;
                l.addClass("premium-gallery-item-hidden"), i.find(".premium-gallery-item").length > this.settings.minimum && (n.removeClass("premium-gallery-item-hidden"), i.parent().on("click", ".premium-gallery-load-less", function() {
                    s.settings.counter = s.settings.counter - s.settings.imageToShow
                }), i.parent().on("click", ".premium-gallery-load-more-btn:not(.premium-gallery-load-less)", function() {
                    s.updateCounter(), s.updateGrid(e, t, l)
                }))
            },
            getItemsToHide: function(e, t) {
                return e.filteredItems.slice(t, e.filteredItems.length).map(function(e) {
                    return e.element
                })
            },
            appendItems: function(e, t, i) {
                var l = this.elements.$galleryElement,
                    n = this.elements.$gradientLayer,
                    s = l.data("isotope"),
                    r = this.getItemsToHide(s, e);
                n.outerHeight(t), l.find(".premium-gallery-item-hidden").removeClass("premium-gallery-item-hidden"), l.parent().find(".premium-gallery-load-more").removeClass("premium-gallery-item-hidden"), a(r).addClass("premium-gallery-item-hidden"), i.isotope("layout"), 0 == r && (n.addClass("premium-gallery-item-hidden"), l.parent().find(".premium-gallery-load-more").addClass("premium-gallery-item-hidden"))
            },
            triggerFilerTabs: function(e) {
                var t = e.searchParams.get(this.settings.flag),
                    i = this.elements.$filters;
                t && i.eq(t).find("a").trigger("click")
            },
            onReady: function(e) {
                var t = this;
                e.isotope("layout");
                var i = new URL(window.location.href);
                i && t.triggerFilerTabs(i), t.$element.find(".category.active").trigger("click"), t.$element.find(".elementor-invisible").removeClass("elementor-invisible")
            },
            onResize: function(e) {
                this.setMetroLayout(), e.isotope({
                    itemSelector: ".premium-gallery-item",
                    masonry: {
                        columnWidth: this.settings.columnWidth
                    }
                })
            },
            lightBoxDisabled: function() {
                var l = this;
                this.elements.$vidWrap.each(function(e, t) {
                    var i = a(t).data("type");
                    a(".pa-gallery-video-icon").keypress(function() {
                        a(this).closest(".premium-gallery-item").trigger("click")
                    }), a(t).closest(".premium-gallery-item").on("click", function() {
                        var e = a(this);
                        e.find(".pa-gallery-img-container").css("background", "#000"), e.find("img, .pa-gallery-icons-caption-container, .pa-gallery-icons-wrapper").css("visibility", "hidden"), "style3" !== l.settings.skin && e.find(".premium-gallery-caption").css("visibility", "hidden"), "hosted" !== i ? l.playVid(e) : l.playHostedVid(t)
                    })
                })
            },
            playVid: function(e) {
                var t = e.find(".premium-gallery-iframe-wrap"),
                    i = t.data("src");
                i = i.replace("&mute", "&autoplay=1&mute");
                var l = a("<iframe/>");
                l.attr({
                    src: i,
                    frameborder: "0",
                    allowfullscreen: "1",
                    allow: "autoplay;encrypted-media;"
                }), t.html(l), l.css("visibility", "visible")
            },
            playHostedVid: function(e) {
                var t = a(e).find("video");
                t.get(0).play(), t.css("visibility", "visible")
            },
            run: function() {
                var e = this.elements.$galleryElement,
                    t = (this.elements.$vidWrap, this.elements.$filters),
                    i = this;
                "metro" === this.settings.layout && (this.setMetroLayout(), this.settings.layout = "masonry", a(window).resize(function() {
                    i.onResize(l)
                }));
                var l = e.isotope(this.getIsoTopeSettings());
                if (l.imagesLoaded().progress(function() {
                        l.isotope("layout")
                    }), a(document).ready(function() {
                        i.onReady(l)
                    }), this.settings.loadMore) {
                    var n = this.elements.$gradientLayer,
                        s = null;
                    setTimeout(function() {
                        s = n.outerHeight()
                    }, 200), this.loadMore(s, l)
                }
                "yes" !== this.settings.light_box && this.lightBoxDisabled(), t.find("a").click(function(e) {
                    return e.preventDefault(), i.isFilterClicked = !0, t.find(".active").removeClass("active"), a(this).addClass("active"), i.settings.filter = a(this).attr("data-filter"), l.isotope({
                        filter: i.settings.filter
                    }), i.settings.shuffle && l.isotope("shuffle"), i.settings.loadMore && i.appendItems(i.settings.minimum, s, l), !1
                }), "default" === this.settings.lightbox_type && this.$element.find(".premium-img-gallery a[data-rel^='prettyPhoto']").prettyPhoto(this.getPrettyPhotoSettings())
            },
            getPrettyPhotoSettings: function() {
                return {
                    theme: this.settings.theme,
                    hook: "data-rel",
                    opacity: .7,
                    show_title: !1,
                    deeplinking: !1,
                    overlay_gallery: this.settings.overlay,
                    custom_markup: "",
                    default_width: 900,
                    default_height: 506,
                    social_tools: ""
                }
            },
            getIsoTopeSettings: function() {
                return {
                    itemSelector: ".premium-gallery-item",
                    percentPosition: !0,
                    animationOptions: {
                        duration: 750,
                        easing: "linear"
                    },
                    filter: this.settings.active_cat,
                    layoutMode: this.settings.layout,
                    originLeft: this.settings.ltrMode,
                    masonry: {
                        columnWidth: this.settings.columnWidth
                    },
                    sortBy: this.settings.sort_by
                }
            },
            getRepeaterSettings: function() {
                return this.getElementSettings("premium_gallery_img_content")
            },
            setMetroLayout: function() {
                var e = this.elements.$galleryElement,
                    t = e.width(),
                    n = Math.floor(t / 12),
                    i = elementorFrontend.getCurrentDeviceMode(),
                    s = "desktop" === i ? "" : "_" + i,
                    r = this.getRepeaterSettings();
                e.find(".premium-gallery-item").each(function(e, t) {
                    var i = r[e]["premium_gallery_image_cell" + s].size,
                        l = r[e]["premium_gallery_image_vcell" + s].size;
                    "" !== i && null != i || (i = r[e].premium_gallery_image_cell), "" !== l && null != l || (l = r[e].premium_gallery_image_vcell), a(t).css({
                        width: Math.ceil(i * n),
                        height: Math.ceil(l * n)
                    })
                }), this.settings.columnWidth = n
            }
        });
        elementorFrontend.elementsHandler.attachHandler("premium-img-gallery", e)
    })
}(jQuery);
! function(a) {
    function n(a, n) {
        var o = a.find(".premium-modal-box-container"),
            t = o.data("settings"),
            e = o.find(".premium-modal-box-modal-dialog");
        if (t && ("pageload" === t.trigger && n(document).ready(function(a) {
                setTimeout(function() {
                    o.find(".premium-modal-box-modal").modal()
                }, 1e3 * t.delay)
            }), e.data("modal-animation") && " " != e.data("modal-animation"))) {
            var i = e.data("delay-animation");
            new Waypoint({
                element: e,
                handler: function() {
                    setTimeout(function() {
                        e.css("opacity", "1").addClass("animated " + e.data("modal-animation"))
                    }, 1e3 * i), this.destroy()
                },
                offset: Waypoint.viewportHeight() - 150
            })
        }
    }
    a(window).on("elementor/frontend/init", function() {
        elementorFrontend.hooks.addAction("frontend/element_ready/premium-addon-modal-box.default", n)
    })
}(jQuery);
! function(a) {
    a(window).on("elementor/frontend/init", function() {
        var e = elementorModules.frontend.handlers.Base.extend({
            settings: {},
            getDefaultSettings: function() {
                return {
                    selectors: {
                        user: ".fa-user",
                        activeCat: ".category.active",
                        loading: ".premium-loading-feed",
                        blogElement: ".premium-blog-wrap",
                        blogFilterTabs: ".premium-blog-filter",
                        contentWrapper: ".premium-blog-content-wrapper",
                        blogPost: ".premium-blog-post-outer-container",
                        metaSeparators: ".premium-blog-meta-separator",
                        filterLinks: ".premium-blog-filters-container li a",
                        currentPage: ".premium-blog-pagination-container .page-numbers.current",
                        activeElememnt: ".premium-blog-filters-container li .active"
                    }
                }
            },
            getDefaultElements: function() {
                var e = this.getSettings("selectors");
                return {
                    $blogElement: this.$element.find(e.blogElement),
                    $blogFilterTabs: this.$element.find(e.blogFilterTabs),
                    $activeCat: this.$element.find(e.activeCat),
                    $filterLinks: this.$element.find(e.filterLinks),
                    $blogPost: this.$element.find(e.blogPost),
                    $contentWrapper: this.$element.find(e.contentWrapper)
                }
            },
            bindEvents: function() {
                this.setLayoutSettings(), this.removeMetaSeparators(), this.run()
            },
            setLayoutSettings: function() {
                var e = this.getElementSettings(),
                    t = this.elements.$blogPost,
                    s = {
                        pageNumber: 1,
                        isLoaded: !0,
                        count: 2,
                        equalHeight: e.force_height,
                        layout: e.premium_blog_layout,
                        carousel: "yes" === e.premium_blog_carousel,
                        infinite: "yes" === e.premium_blog_infinite_scroll,
                        scrollAfter: "yes" === e.scroll_to_offset,
                        grid: "yes" === e.premium_blog_grid,
                        total: t.data("total")
                    };
                s.carousel && (s.slidesToScroll = e.slides_to_scroll, s.spacing = parseInt(e.premium_blog_carousel_spacing), s.autoPlay = "yes" === e.premium_blog_carousel_play, s.arrows = "yes" === e.premium_blog_carousel_arrows, s.fade = "yes" === e.premium_blog_carousel_fade, s.center = "yes" === e.premium_blog_carousel_center, s.dots = "yes" === e.premium_blog_carousel_dots, s.speed = "" !== e.carousel_speed ? parseInt(e.carousel_speed) : 300, s.autoplaySpeed = "" !== e.premium_blog_carousel_autoplay_speed ? parseInt(e.premium_blog_carousel_autoplay_speed) : 5e3), this.settings = s
            },
            removeMetaSeparators: function() {
                var s = this.getSettings("selectors"),
                    e = this.$element.find(s.blogPost),
                    t = e.first().find(s.metaSeparators),
                    i = e.find(s.user);
                1 === t.length ? i.length || e.find(s.metaSeparators).remove() : i.length || e.each(function(e, t) {
                    a(t).find(s.metaSeparators).first().remove()
                })
            },
            run: function() {
                var e = this,
                    t = this.elements.$blogElement,
                    s = this.elements.$activeCat.data("filter"),
                    i = this.elements.$blogFilterTabs.length,
                    n = t.data("pagination");
                this.settings.activeCategory = s, this.settings.filterTabs = i, this.settings.filterTabs && this.filterTabs(), this.settings.filterTabs && "*" !== this.settings.activeCategory || "masonry" !== this.settings.layout || this.settings.carousel || t.imagesLoaded(function() {
                    t.isotope(e.getIsoTopeSettings())
                }), this.settings.carousel && (t.slick(this.getSlickSettings()), t.removeClass("premium-carousel-hidden")), "even" === this.settings.layout && this.settings.equalHeight && t.imagesLoaded(function() {
                    e.forceEqualHeight()
                }), n && this.paginate(), this.settings.infinite && t.is(":visible") && this.getInfiniteScrollPosts()
            },
            paginate: function() {
                var s = this,
                    i = this.$element,
                    n = this.getSettings("selectors");
                i.on("click", ".premium-blog-pagination-container .page-numbers", function(e) {
                    if (e.preventDefault(), !a(this).hasClass("current")) {
                        var t = parseInt(i.find(n.currentPage).html());
                        a(this).hasClass("next") ? s.settings.pageNumber = t + 1 : a(this).hasClass("prev") ? s.settings.pageNumber = t - 1 : s.settings.pageNumber = a(this).html(), s.getPostsByAjax(s.settings.scrollAfter)
                    }
                })
            },
            forceEqualHeight: function() {
                var i = new Array,
                    e = this.getSettings("selectors").contentWrapper,
                    t = this.$element.find(e);
                t.each(function(e, t) {
                    var s = a(t).outerHeight();
                    i.push(s)
                });
                var s = Math.max.apply(null, i);
                t.css("height", s + "px")
            },
            getSlickSettings: function() {
                var e = this.settings,
                    t = e.grid ? this.getSlickCols() : null,
                    s = e.grid ? t.cols : 1,
                    i = e.grid ? t.colsTablet : 1,
                    n = e.grid ? t.colsMobile : 1,
                    o = e.arrows ? '<a type="button" data-role="none" class="carousel-arrow carousel-prev" aria-label="Previous" role="button" style=""><i class="fas fa-angle-left" aria-hidden="true"></i></a>' : "",
                    a = e.arrows ? '<a type="button" data-role="none" class="carousel-arrow carousel-next" aria-label="Next" role="button" style=""><i class="fas fa-angle-right" aria-hidden="true"></i></a>' : "";
                return {
                    infinite: !0,
                    slidesToShow: s,
                    slidesToScroll: e.slidesToScroll || s,
                    responsive: [{
                        breakpoint: 1025,
                        settings: {
                            slidesToShow: i,
                            slidesToScroll: 1
                        }
                    }, {
                        breakpoint: 768,
                        settings: {
                            slidesToShow: n,
                            slidesToScroll: 1
                        }
                    }],
                    autoplay: e.autoPlay,
                    rows: 0,
                    speed: e.speed,
                    autoplaySpeed: e.autoplaySpeed,
                    nextArrow: a,
                    prevArrow: o,
                    fade: e.fade,
                    centerMode: e.center,
                    centerPadding: e.spacing + "px",
                    draggable: !0,
                    dots: e.dots,
                    customPaging: function() {
                        return '<i class="fas fa-circle"></i>'
                    }
                }
            },
            getSlickCols: function() {
                var e = this.getElementSettings(),
                    t = e.premium_blog_columns_number,
                    s = e.premium_blog_columns_number_tablet,
                    i = e.premium_blog_columns_number_mobile;
                return {
                    cols: parseInt(100 / t.substr(0, t.indexOf("%"))),
                    colsTablet: parseInt(100 / s.substr(0, s.indexOf("%"))),
                    colsMobile: parseInt(100 / i.substr(0, i.indexOf("%")))
                }
            },
            getIsoTopeSettings: function() {
                return {
                    itemSelector: ".premium-blog-post-outer-container",
                    percentPosition: !0,
                    filter: this.settings.activeCategory,
                    animationOptions: {
                        duration: 750,
                        easing: "linear",
                        queue: !1
                    }
                }
            },
            filterTabs: function() {
                var t = this,
                    s = this.getSettings("selectors");
                this.elements.$filterLinks.click(function(e) {
                    e.preventDefault(), t.$element.find(s.activeElememnt).removeClass("active"), a(this).addClass("active"), t.settings.activeCategory = a(this).attr("data-filter"), t.settings.pageNumber = 1, t.settings.infinite ? (t.getPostsByAjax(!1), t.settings.count = 2, t.getInfiniteScrollPosts()) : t.getPostsByAjax(t.settings.scrollAfter)
                })
            },
            getPostsByAjax: function(t) {
                void 0 === this.settings.activeCategory && (this.settings.activeCategory = "*");
                var i = this,
                    n = this.elements.$blogElement,
                    o = this.getSettings("selectors");
                a.ajax({
                    url: PremiumSettings.ajaxurl,
                    dataType: "json",
                    type: "POST",
                    data: {
                        action: "pa_get_posts",
                        page_id: n.data("page"),
                        widget_id: i.$element.data("id"),
                        page_number: i.settings.pageNumber,
                        category: i.settings.activeCategory,
                        nonce: PremiumSettings.nonce
                    },
                    beforeSend: function() {
                        n.append('<div class="premium-loading-feed"><div class="premium-loader"></div></div>');
                        var e = 0;
                        0 < a(".elementor-sticky").length && (e = 100), t && a("html, body").animate({
                            scrollTop: n.offset().top - 50 - e
                        }, "slow")
                    },
                    success: function(e) {
                        if (e.data) {
                            n.find(o.loading).remove();
                            var t = e.data.posts,
                                s = e.data.paging;
                            i.settings.infinite ? (i.settings.isLoaded = !0, i.settings.filterTabs && 1 === i.settings.pageNumber ? n.html(t) : n.append(t)) : (n.html(t), i.$element.find(".premium-blog-footer").html(s)), i.removeMetaSeparators(), i.settings.layout && ("even" === i.settings.layout ? i.settings.equalHeight && i.forceEqualHeight() : n.imagesLoaded(function() {
                                n.isotope("reloadItems"), n.isotope({
                                    itemSelector: ".premium-blog-post-outer-container",
                                    animate: !1
                                })
                            }))
                        }
                    },
                    error: function(e) {
                        console.log(e)
                    }
                })
            },
            getInfiniteScrollPosts: function() {
                var e = jQuery(window).outerHeight() / 1.25,
                    t = this;
                a(window).scroll(function() {
                    t.settings.filterTabs && ($blogPost = t.elements.$blogElement.find(".premium-blog-post-outer-container"), t.settings.total = $blogPost.data("total")), t.settings.count <= t.settings.total && a(window).scrollTop() + e >= t.$element.find(".premium-blog-post-outer-container:last").offset().top && 1 == t.settings.isLoaded && (t.settings.pageNumber = t.settings.count, t.getPostsByAjax(!1), t.settings.count++, t.settings.isLoaded = !1)
                })
            }
        });
        elementorFrontend.elementsHandler.attachHandler("premium-addon-blog", e)
    })
}(jQuery);
! function(e) {
    function i(d, m) {
        var i, o, l = d.find(".premium-video-box-container"),
            e = d.find(".premium-video-box-playlist-container"),
            t = l.find(".premium-video-box-video-container"),
            c = l.find(".premium-video-box-inner-wrap"),
            p = c.find(".premium-video-box-image-container"),
            a = l.data("type"),
            n = l.data("thumbnail"),
            r = l.data("sticky"),
            s = l.data("sticky-play"),
            f = l.data("hover"),
            v = e.length ? e : l,
            u = !!v.data("lightbox") && v.data("lightbox");
        if (u) "prettyphoto" === u.type && v.find(".premium-vid-lightbox-container[data-rel^='prettyPhoto']").prettyPhoto({
            theme: u.theme,
            hook: "data-rel",
            opacity: .7,
            show_title: !1,
            deeplinking: !1,
            overlay_gallery: !0,
            custom_markup: "",
            default_width: 900,
            default_height: 506,
            social_tools: ""
        }), v.find(".premium-video-box-image-container, .premium-video-box-play-icon-container").on("click", function(e) {
            var i;
            i = m(this).closest(".premium-video-box-container"), "elementor" === u.type ? i.find(".premium-video-box-video-container").trigger("click") : i.find(".premium-vid-lightbox-container[data-rel^='prettyPhoto']").trigger("click")
        });
        else {
            if (e.length) {
                if (!t.length) return;
                return void t.each(function(e, i) {
                    var o, t = m(i),
                        a = t.closest(".premium-video-box-container"),
                        n = t.closest(".premium-video-box-trigger");
                    o = t.data("src"), o += "&autoplay=1", n.on("click", function() {
                        var e = m("<iframe/>");
                        e.attr({
                            src: o,
                            frameborder: "0",
                            allowfullscreen: "1",
                            allow: "autoplay;encrypted-media;"
                        }), t.css("background", "#000"), t.html(e), a.find(".premium-video-box-image-container, .premium-video-box-play-icon-container").remove()
                    })
                })
            }
            if ("self" === a ? (i = t.find("video"), o = i.attr("src"), l.data("play-viewport") && (elementorFrontend.waypoint(l, function() {
                    y()
                }, {
                    offset: "top-in-view",
                    triggerOnce: !1
                }), l.data("play-reset") && elementorFrontend.waypoint(l, function(e) {
                    "up" === e && (l.removeClass("playing"), m(i).get(0).pause(), m(i).get(0).currentTime = 0)
                }, {
                    offset: "100%",
                    triggerOnce: !1
                }))) : (o = t.data("src"), n && -1 === o.indexOf("autoplay=1") ? o += "&autoplay=1" : l.data("play-viewport") ? elementorFrontend.waypoint(l, function() {
                    y()
                }, {
                    offset: "top-in-view"
                }) : y()), l.on("click", function() {
                    y()
                }), "yes" !== r || "yes" === s) return;
            b()
        }

        function y() {
            if (!l.hasClass("playing")) {
                if (l.addClass("playing"), "yes" === s && b(), "self" === a) m(i).get(0).play(), t.css({
                    opacity: "1",
                    visibility: "visible"
                });
                else {
                    var e = m("<iframe/>");
                    e.attr({
                        src: o,
                        frameborder: "0",
                        allowfullscreen: "1",
                        allow: "autoplay;encrypted-media;"
                    }), t.css("background", "#000"), t.html(e)
                }
                l.find(".premium-video-box-image-container, .premium-video-box-play-icon-container, .premium-video-box-description-container").remove(), "vimeo" === a && l.find(".premium-video-box-vimeo-wrap").remove()
            }
        }

        function b() {
            var o = l.data("hide-desktop"),
                t = l.data("hide-tablet"),
                a = l.data("hide-mobile"),
                n = l.data("sticky-margin");
            if (l.off("click").on("click", function(e) {
                    var i = e.target.className;
                    if (0 <= i.toString().indexOf("premium-video-box-sticky-close") || 0 <= i.toString().indexOf("premium-video-box-sticky-close")) return !1;
                    y()
                }), void 0 !== elementorFrontend.waypoint) var i = elementorFrontend.waypoint(l, function(e) {
                if ("down" === e) {
                    if (l.removeClass("premium-video-box-sticky-hide").addClass("premium-video-box-sticky-apply premium-video-box-filter-sticky"), d.hasClass("elementor-motion-effects-parent") && d.removeClass("elementor-motion-effects-perspective").find(".elementor-widget-container").addClass("premium-video-box-transform"), l.data("mask") && (d.find(".premium-video-box-mask-filter").removeClass("premium-video-box-mask-filter"), l.find(":first-child").removeClass("premium-video-box-mask-media"), p.removeClass(f).removeClass("premium-video-box-mask-media").css({
                            transition: "width 0.2s, height 0.2s",
                            "-webkit-transition": "width 0.2s, height 0.2s"
                        })), m(document).trigger("premium_after_sticky_applied", [d]), c.data("video-animation") && " " != c.data("video-animation")) {
                        c.css("opacity", "0");
                        var i = c.data("delay-animation");
                        setTimeout(function() {
                            c.css("opacity", "1").addClass("animated " + c.data("video-animation"))
                        }, 1e3 * i)
                    }
                } else l.removeClass("premium-video-box-sticky-apply  premium-video-box-filter-sticky").addClass("premium-video-box-sticky-hide"), d.hasClass("elementor-motion-effects-parent") && d.addClass("elementor-motion-effects-perspective").find(".elementor-widget-container").removeClass("premium-video-box-transform"), l.data("mask") && (l.parent().addClass("premium-video-box-mask-filter"), l.find(":first-child").eq(0).addClass("premium-video-box-mask-media"), p.addClass("premium-video-box-mask-media")), p.addClass(f).css({
                    transition: "all 0.2s",
                    "-webkit-transition": "all 0.2s"
                }), c.removeClass("animated " + c.data("video-animation"))
            }, {
                offset: "0%",
                triggerOnce: !1
            });

            function r(e) {
                var i = elementorFrontend.getCurrentDeviceMode();
                "" !== o && i == o || "" !== t && i == t || "" !== a && i == a ? s(e) : e[0].enable()
            }

            function s(e) {
                e[0].disable(), l.removeClass("premium-video-box-sticky-apply premium-video-box-sticky-hide")
            }

            function e() {
                l.hasClass("premium-video-box-sticky-apply") && c.draggable({
                    start: function() {
                        m(this).css({
                            transform: "none",
                            top: m(this).offset().top + "px",
                            left: m(this).offset().left + "px"
                        })
                    },
                    containment: "window"
                })
            }
            d.find(".premium-video-box-sticky-close").off("click.closetrigger").on("click.closetrigger", function(e) {
                e.stopPropagation(), i[0].disable(), l.removeClass("premium-video-box-sticky-apply premium-video-box-sticky-hide"), d.hasClass("elementor-motion-effects-parent") && d.addClass("elementor-motion-effects-perspective").find(".elementor-widget-container").removeClass("premium-video-box-transform"), l.data("mask") && (l.parent().addClass("premium-video-box-mask-filter"), l.find(":first-child").eq(0).addClass("premium-video-box-mask-media"), p.addClass("premium-video-box-mask-media"))
            }), r(i), e(), window.addEventListener("scroll", e), m(window).resize(function(e) {
                r(i)
            }), m(document).on("premium_after_sticky_applied", function(e, i) {
                var o = i.find(".premium-video-box-sticky-infobar");
                if (0 !== o.length) {
                    var t = o.outerHeight();
                    if ((i.hasClass("premium-video-sticky-center-left") || i.hasClass("premium-video-sticky-center-right")) && (t = Math.ceil(t / 2), c.css("top", "calc( 50% - " + t + "px )")), (i.hasClass("premium-video-sticky-bottom-left") || i.hasClass("premium-video-sticky-bottom-right")) && "" !== n) {
                        var a = (t = Math.ceil(t)) + n;
                        c.css("bottom", a)
                    }
                }
            })
        }
    }
    e(window).on("elementor/frontend/init", function() {
        elementorFrontend.hooks.addAction("frontend/element_ready/premium-addon-video-box.default", i)
    })
}(jQuery);
! function(i) {
    i(window).on("elementor/frontend/init", function() {
        var e = elementorModules.frontend.handlers.Base.extend({
            getDefaultSettings: function() {
                return {
                    slick: {
                        infinite: !0,
                        rows: 0,
                        prevArrow: '<a type="button" data-role="none" class="carousel-arrow carousel-prev" aria-label="Next" role="button" style=""><i class="fas fa-angle-left" aria-hidden="true"></i></a>',
                        nextArrow: '<a type="button" data-role="none" class="carousel-arrow carousel-next" aria-label="Next" role="button" style=""><i class="fas fa-angle-right" aria-hidden="true"></i></a>',
                        draggable: !0,
                        pauseOnHover: !0
                    },
                    selectors: {
                        multiplePersons: ".multiple-persons",
                        person: ".premium-person-container",
                        personCarousel: ".premium-person-container.slick-active",
                        personImg: ".premium-person-image-container img"
                    }
                }
            },
            getDefaultElements: function() {
                var e = this.getSettings("selectors");
                return {
                    $multiplePersons: this.$element.find(e.multiplePersons),
                    $persons: this.$element.find(e.person),
                    $personImg: this.$element.find(e.personImg)
                }
            },
            bindEvents: function() {
                this.run()
            },
            getSlickSettings: function() {
                var e = this.getElementSettings(),
                    t = this.elements.$multiplePersons.data("rtl"),
                    n = e.persons_per_row,
                    s = e.persons_per_row_tablet,
                    r = e.persons_per_row_mobile;
                return Object.assign(this.getSettings("slick"), {
                    slidesToShow: parseInt(100 / n.substr(0, n.indexOf("%"))),
                    slidesToScroll: parseInt(100 / n.substr(0, n.indexOf("%"))),
                    responsive: [{
                        breakpoint: 1025,
                        settings: {
                            slidesToShow: parseInt(100 / s.substr(0, s.indexOf("%"))),
                            slidesToScroll: 1
                        }
                    }, {
                        breakpoint: 768,
                        settings: {
                            slidesToShow: parseInt(100 / r.substr(0, r.indexOf("%"))),
                            slidesToScroll: 1
                        }
                    }],
                    autoplay: e.carousel_play,
                    rtl: !!t,
                    autoplaySpeed: e.speed || 5e3
                })
            },
            runEqualHeight: function() {
                var e = this.elements.$persons,
                    t = this.elements.$personImg,
                    n = this.getSettings("selectors"),
                    s = this.getElementSettings("carousel"),
                    r = new Array;
                s && (e = this.$element.find(n.personCarousel)), e.each(function(e, t) {
                    i(t).imagesLoaded(function() {}).done(function() {
                        var e = i(t).find(n.personImg).outerHeight();
                        r.push(e)
                    })
                }), e.imagesLoaded(function() {}).done(function() {
                    var e = Math.max.apply(null, r);
                    t.css("height", e + "px")
                })
            },
            run: function() {
                var e = this.elements.$multiplePersons;
                e.length && ("yes" === e.data("persons-equal") && this.runEqualHeight(), this.getElementSettings("carousel") && e.slick(this.getSlickSettings()))
            }
        });
        elementorFrontend.elementsHandler.attachHandler("premium-addon-person", e)
    })
}(jQuery);
! function(m) {
    m(window).on("elementor/frontend/init", function() {
        var e = elementorModules.frontend.handlers.Base.extend({
            getDefaultSettings: function() {
                return {
                    selectors: {
                        listItems: ".premium-bullet-list-box",
                        items: ".premium-bullet-list-content"
                    }
                }
            },
            getDefaultElements: function() {
                var e = this.getSettings("selectors");
                return {
                    $listItems: this.$element.find(e.listItems),
                    $items: this.$element.find(e.items)
                }
            },
            bindEvents: function() {
                this.run(), this.addRandomBadges();
                var e = this;
                !this.$element.is(":visible") && 0 < this.$element.closest(".premium-mega-nav-item").length && this.$element.closest(".premium-mega-nav-item").find(".premium-menu-link").on("click", function() {
                    e.addRandomBadges()
                })
            },
            run: function() {
                var n = this.elements.$listItems;
                this.elements.$items.each(function(e, i) {
                    n.data("list-animation") && " " != n.data("list-animation") && elementorFrontend.waypoint(m(i), function() {
                        var e = m(i),
                            t = e.data("delay");
                        setTimeout(function() {
                            e.next(".premium-bullet-list-divider , .premium-bullet-list-divider-inline").css("opacity", "1"), e.next(".premium-bullet-list-divider-inline , .premium-bullet-list-divider").addClass("animated " + n.data("list-animation")), e.css("opacity", "1").addClass("animated " + n.data("list-animation"))
                        }, t)
                    })
                })
            },
            addRandomBadges: function() {
                var e = this.getElementSettings();
                e.rbadges_repeater.length < 1 || m(".elementor-element-" + this.$element.data("id")).is(":visible") && !this.$element.hasClass("randomb-applied") && (e.rbadges_repeater.forEach(function(e, t) {
                    if ("" != e.rbadge_selector)
                        for (var i = m(e.rbadge_selector).find(".premium-bullet-list-text").filter(":not(:has(+ .premium-bullet-list-badge))"), n = '<div class="premium-bullet-list-badge elementor-repeater-item-' + e._id + '"><span>' + e.badge_title + "</span></div>", a = Math.floor(Math.random() * (e.rbadge_max - e.rbadge_min + 1)) + e.rbadge_min, l = 0; l < a; l++) {
                            var s = Math.floor(Math.random() * i.length);
                            0 < m(i[s]).siblings(".premium-bullet-list-badge").length || m(i[s]).after(n)
                        }
                }), this.$element.addClass("randomb-applied"))
            }
        });
        elementorFrontend.elementsHandler.attachHandler("premium-icon-list", e)
    })
}(jQuery);